{"version":3,"file":"src_app_pages_survey_survey_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEZ;AAE3C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oDAAU;KACtB;CACF,CAAC;IAMW,uBAAuB,SAAvB,uBAAuB;CAAG;AAA1B,uBAAuB;IAJnC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBK;AACM;AACF;AAEA;AAEqB;AAEvB;IAW9B,gBAAgB,SAAhB,gBAAgB;CAAG;AAAnB,gBAAgB;IAT5B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,2EAAuB;SACxB;QACD,YAAY,EAAE,CAAC,oDAAU,CAAC;KAC3B,CAAC;GACW,gBAAgB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBwC;AACZ;AACR;AACA;AACQ;AAC2B;AACD;AACP;AACZ;AAC/B;IAqBpB,UAAU,SAAV,UAAU;IA8DrB,YACU,KAAqB,EACrB,OAAgB,EAChB,SAAoB,EACpB,YAA0B,EAC1B,aAA4B,EAC5B,iBAAoC,EACpC,iBAAoC,EACpC,eAAgC,EAChC,MAAc,EACd,GAAiB;QATjB,UAAK,GAAL,KAAK,CAAgB;QACrB,YAAO,GAAP,OAAO,CAAS;QAChB,cAAS,GAAT,SAAS,CAAW;QACpB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,kBAAa,GAAb,aAAa,CAAe;QAC5B,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,oBAAe,GAAf,eAAe,CAAiB;QAChC,WAAM,GAAN,MAAM,CAAQ;QACd,QAAG,GAAH,GAAG,CAAc;QArE3B,6CAA6C;QAC7C,gBAAW,GAAG,QAAQ,CAAC;QAEvB,mCAAmC;QACnC,oBAAe,GAAG,CAAC,CAAC;QAMpB,gGAAgG;QAChG,WAAM,GAAW;YACf,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,WAAW,EAAE,EAAE;YAEf,SAAS,EAAE,EAAE;YACb,MAAM,EAAE;gBACN,KAAK,EAAE,EAAE;gBACT,OAAO,EAAE,EAAE;gBACX,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,CAAC;gBACX,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,KAAK;gBACb,eAAe,EAAE,CAAC;gBAClB,MAAM,EAAE,KAAK;gBACb,YAAY,EAAE,EAAE;gBAChB,OAAO,EAAE,KAAK;gBACd,aAAa,EAAE,CAAC;aACjB;YACD,KAAK,EAAE;gBACL,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,EAAE;gBACZ,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,EAAE;gBACT,IAAI,EAAE,KAAK;gBACX,UAAU,EAAE,CAAC;aACd;YACD,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,KAAK;oBACd,SAAS,EAAE,EAAE;iBACd;aACF;YACD,IAAI,EAAE,EAAE;YACR,YAAY,EAAE,EAAE;YAChB,OAAO,EAAE,KAAK;SACf;IAsBG,CAAC;IAEL;;;OAGG;IACH,QAAQ;QACN,sCAAsC;QACtC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QACnC,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC;QAErD,0DAA0D;QAC1D,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;gBAC1B,CACZ,QAAQ,CAAC,aAAa,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAC3D,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,EAAE,IAAI,CAAC;gBACnC,CACZ,QAAQ,CAAC,aAAa,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAC3D,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;QAEH,qCAAqC;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAEjE,OAAO,CAAC,GAAG,CAAC;YACV,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;SACzB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACjB,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEvB,oCAAoC;YACpC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBAClD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE;wBAClD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;wBACtC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;wBACxC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;wBACpB,MAAM;qBACP;iBACF;gBAED,8BAA8B;gBAC9B,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;oBACrD,IAAI,aAAa,GAAG,KAAK,CAAC;oBAC1B,KAAK,MAAM,IAAI,IAAI,CAAC,EAAE;wBACpB,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;4BACzC,aAAa,GAAG,IAAI,CAAC;4BACrB,MAAM;yBACP;qBACF;oBACD,IAAI,CAAC,aAAa,EAAE;wBAClB,IAAI,CAAC,SAAS,CACZ,wDAAwD,EACxD,QAAQ,CACT,CAAC;wBACF,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACtC;gBACH,CAAC,CAAC,CAAC;gBAEH,yCAAyC;gBACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAErC,yBAAyB;gBACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAEpD,8BAA8B;gBAC9B,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;oBACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC3D;gBAED,gCAAgC;gBAChC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC1C,IAAI,OAAO,CAAC,OAAO,EAAE;wBACnB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;qBACrD;iBACF;gBAED,sCAAsC;gBACtC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAChD,IAAI,CAAC,oBAAoB;oBACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;gBAEtD,qDAAqD;gBACrD,kDAAkD;gBAClD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;gBAElC,qCAAqC;gBACrC,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC5C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;iBAC3B;qBAAM;oBACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;iBAC5C;gBAED,uCAAuC;gBACvC,IAAI,CAAC,SAAS;oBACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;gBAE3D,8BAA8B;gBAC9B,gGAAgG;gBAChG,MAAM,YAAY,GAAuC,EAAE,CAAC;gBAC5D,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC1C,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE;wBACxC,IAAI,QAAQ,CAAC,UAAU,EAAE;4BACvB,mFAAmF;4BACnF,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;4BAEzB,qCAAqC;4BACrC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,YAAY,CAAC,EAAE;gCAC1C,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;gCACvC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;6BACrD;iCAAM;gCACL,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;6BACrD;yBACF;qBACF;iBACF;gBAED,qDAAqD;gBACrD,MAAM,SAAS,GAAG,EAAE,CAAC;gBACrB,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;oBAC9B,IAAI,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;wBACpC,4EAA4E;wBAC5E,SAAS,CAAC,IAAI,CACZ,YAAY,CAAC,GAAG,CAAC,CACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CACrD,CACF,CAAC;qBACH;iBACF;gBAED,4EAA4E;gBAC5E,qEAAqE;gBACrE,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC1C,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE;wBACxC,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;4BACnC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;4BAC1B,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;4BACtB,oEAAoE;4BACpE,4CAA4C;4BAC5C,4BAA4B;yBAC7B;6BAAM,IAAI,QAAQ,CAAC,QAAQ,EAAE;4BAC5B,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;4BAC5B,aAAa;4BACb,OAAO,QAAQ,CAAC,OAAO,CAAC;4BACxB,aAAa;4BACb,OAAO,QAAQ,CAAC,UAAU,CAAC;4BAC3B,aAAa;4BACb,OAAO,QAAQ,CAAC,OAAO,CAAC;yBACzB;qBACF;iBACF;gBAED,gCAAgC;gBAChC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC1C,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE;wBACxC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;qBACvC;iBACF;gBAED,iCAAiC;gBACjC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;oBAC1C,SAAS,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE;oBAC5B,YAAY,EAAE,mCAAM,EAAE,CAAC,OAAO,EAAE;oBAChC,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,OAAO;oBACd,YAAY,EAAE,IAAI,CAAC,YAAY;iBAChC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,IAAI;QACF,IAAI,IAAI,CAAC,eAAe,GAAG,CAAC,EAAE;YAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE;gBACnB,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,oBAAoB;oBACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;gBACtD,IAAI,CAAC,SAAS;oBACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC3D,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAC5B,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,mBAAmB;YACnB,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;gBAC1C,SAAS,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE;gBAC5B,YAAY,EAAE,mCAAM,EAAE,CAAC,OAAO,EAAE;gBAChC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,MAAM;gBACb,YAAY,EAAE,IAAI,CAAC,YAAY;aAChC,CAAC,CAAC;YACH,8BAA8B;YAC9B,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SACtC;IACH,CAAC;IAED;;;OAGG;IACH,sBAAsB,CAAC,IAAY;QACjC,4DAA4D;QAC5D,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC1C,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE;gBACxC,sEAAsE;gBACtE,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACvB,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;gBACpB,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;gBAC1B,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;gBAE3B,2DAA2D;gBAC3D,IAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;oBAChC,wBAAwB;oBACxB,QAAQ,CAAC,KAAK,GAAG,mCAAM,EAAE,CAAC,MAAM,EAAE,CAAC;oBAEnC,oHAAoH;iBACrH;qBAAM,IACL,QAAQ,CAAC,IAAI,KAAK,OAAO;oBACzB,CAAC,QAAQ,CAAC,OAAO,KAAK,OAAO,IAAI,QAAQ,CAAC,OAAO,KAAK,OAAO,CAAC,EAC9D;oBACA,aAAa;oBACb,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAC7D,QAAQ,CAAC,GAAG,CACb,CAAC;oBACF,IAAI,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE;wBAChC,aAAa;wBACb,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAC/D,QAAQ,CAAC,KAAK,CACf,CAAC;qBACH;oBAED,iIAAiI;iBAClI;qBAAM,IAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;oBACvC,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAC;oBAC9C,aAAa;oBACb,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAC7D,QAAQ,CAAC,GAAG,CACb,CAAC;oBAEF,gFAAgF;iBACjF;qBAAM,IAAI,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE;oBACrC,kBAAkB;oBAClB,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;oBACzB,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;oBAEzB,0DAA0D;oBAC1D,MAAM,KAAK,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;oBACpC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;oBAEvB,oEAAoE;oBACpE,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;oBAEvB,4DAA4D;iBAC7D;qBAAM,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;oBACpC,uDAAuD;oBACvD,MAAM,WAAW,GAAa,EAAE,CAAC;oBACjC,KAAK,MAAM,MAAM,IAAI,QAAQ,CAAC,OAAO,EAAE;wBACrC,WAAW,CAAC,IAAI,CAAC;4BACf,IAAI,EAAE,MAAM;4BACZ,OAAO,EAAE,KAAK;yBACf,CAAC,CAAC;qBACJ;oBACD,QAAQ,CAAC,cAAc,GAAG,WAAW,CAAC;oBAEtC,0CAA0C;oBAC1C,IAAI,QAAQ,CAAC,OAAO,EAAE;wBACpB,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;qBACjE;oBAED,4DAA4D;oBAC5D,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;wBACnB,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;qBACxB;iBACF;aACF;SACF;IACH,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,QAAkB;QAC1B,mCAAmC;QACnC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC;QACnC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;QAE1B,8CAA8C;QAC9C,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,MAAc,EAAE,QAAkB;QAClD,mCAAmC;QACnC,IAAI,SAAS,GAAa,EAAE,CAAC;QAE7B,wDAAwD;QACxD,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,KAAK,EAAE,EAAE;YACjD,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpD,SAAS,CAAC,GAAG,EAAE,CAAC;SACjB;QAED,mDAAmD;QACnD,yCAAyC;QACzC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YACvC,YAAY;YACZ,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC5B;SACF;aAAM;YACL,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC7B;QAED,0CAA0C;QAC1C,IAAI,eAAe,GAAG,EAAE,CAAC;QACzB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,eAAe,IAAI,QAAQ,GAAG,GAAG,CAAC;SACnC;QAED,8BAA8B;QAC9B,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,QAAQ,CAAC,QAAQ,GAAG,eAAe,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,GAAW;QAC1B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAClC,CAAC;IAED,sBAAsB,CAAC,QAAkB;QACvC,yCAAyC;QACzC,yBAAyB;QACzB,IAAI,QAAQ,CAAC,QAAQ,KAAK,SAAS,IAAI,QAAQ,CAAC,QAAQ,EAAE;YACxD,OAAO;SACR;QAED,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;QACvB,0DAA0D;QAC1D,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC1C,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,SAAS,EAAE;gBACjC,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK,EAAE,EAAE;oBACtC,MAAM,SAAS,GAAG,CAAC,CAAC,UAAU,CAAC;oBAE/B,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;wBAC5C,6CAA6C;wBAC7C,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC;wBACzB,MAAM,WAAW,GAAG,SAAS,KAAK,CAAC,CAAC,QAAQ,CAAC;wBAC7C,IAAI,WAAW,KAAK,MAAM,EAAE;4BAC1B,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC;yBACtB;6BAAM;4BACL,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;yBACrB;qBACF;yBAAM,IACL,CAAC,CAAC,IAAI,KAAK,QAAQ;wBACnB,OAAO,SAAS,KAAK,QAAQ;wBAC7B,CAAC,CAAC,QAAQ,EACV;wBACA,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC5C,MAAM,MAAM,GAAG,QAAQ,CACrB,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,EACxC,EAAE,CACH,CAAC;wBACF,MAAM,QAAQ,GAAG,SAAS,KAAK,GAAG,CAAC;wBACnC,IAAI,QAAQ,EAAE;4BACZ,IAAI,CAAC,CAAC,QAAQ,IAAI,MAAM,EAAE;gCACxB,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;6BACrB;iCAAM;gCACL,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC;6BACtB;yBACF;6BAAM;4BACL,IAAI,CAAC,CAAC,QAAQ,IAAI,MAAM,EAAE;gCACxB,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;6BACrB;iCAAM;gCACL,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC;6BACtB;yBACF;qBACF;iBACF;aACF;SACF;IACH,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACrC,IACE,QAAQ,CAAC,QAAQ,KAAK,IAAI;gBAC1B,CAAC,QAAQ,CAAC,QAAQ,KAAK,EAAE,IAAI,QAAQ,CAAC,QAAQ,KAAK,SAAS,CAAC;gBAC7D,QAAQ,CAAC,UAAU,KAAK,IAAI,EAC5B;gBACA,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,UAAU,EAAE,CAAC;aACd;iBAAM;gBACL,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;aAC3B;SACF;QAED,IAAI,UAAU,KAAK,CAAC,EAAE;YACpB,+DAA+D;YAC/D,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,CAAC,YAAY,EAAE;gBAC9C,qCAAqC;gBACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,UAAU,GAAG,mCAAM,CAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CACjC,CAAC,MAAM,EAAE,CAAC;gBAEX,oEAAoE;gBACpE,MAAM,aAAa,GAAG,mCAAM,EAAE,CAAC,MAAM,EAAE,CAAC;gBACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,aAAa,GAAG,aAAa,CAAC;gBAE1D,MAAM,gBAAgB,GAAG,mCAAM,EAAE,CAAC,OAAO,EAAE,CAAC;gBAC5C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;gBAEhE,8CAA8C;gBAC9C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;gBAE7C,yEAAyE;gBACzE,MAAM,SAAS,GAAc,EAAE,CAAC;gBAChC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC1C,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE;wBACxC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC;qBAC5C;iBACF;gBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC;gBAElD,2CAA2C;gBAC3C,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC;oBAC5C,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,SAAS;oBACT,aAAa;oBACb,mBAAmB,EAAE,gBAAgB;oBACrC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,UAAU,IAAI,EAAE;iBACzD,CAAC,CAAC;gBAEH,8BAA8B;gBAC9B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBACpD,mBAAmB;oBACnB,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;wBAC1C,SAAS,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE;wBAC5B,YAAY,EAAE,mCAAM,EAAE,CAAC,OAAO,EAAE;wBAChC,IAAI,EAAE,QAAQ;wBACd,KAAK,EAAE,QAAQ;wBACf,YAAY,EAAE,IAAI,CAAC,YAAY;qBAChC,CAAC,CAAC;oBACH,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;gBACvC,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE;oBACnB,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,SAAS;wBACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;oBAC3D,IAAI,CAAC,oBAAoB;wBACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;oBAEtD,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,CAAC,YAAY,EAAE;wBAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;qBAC5C;oBAED,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;aACJ;SACF;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,4CAA4C,EAAE,QAAQ,CAAC,CAAC;SACxE;IACH,CAAC;IAED;;;;;OAKG;IACG,SAAS,CAAC,OAAe,EAAE,QAAsC;;YACrE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9C,OAAO;gBACP,QAAQ;gBACR,aAAa,EAAE,IAAI;gBACnB,KAAK,EAAE,QAAQ;gBACf,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,QAAQ;wBACd,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC;qBAClB;iBACF;aACF,CAAC,CAAC;YAEH,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC;KAAA;IAED;;;;;;OAMG;IACH,OAAO,CAAI,KAAU;QACnB,IAAI,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC;QAChC,IAAI,cAAc,CAAC;QACnB,IAAI,WAAW,CAAC;QAEhB,4CAA4C;QAC5C,OAAO,CAAC,KAAK,YAAY,EAAE;YACzB,8BAA8B;YAC9B,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,CAAC,CAAC;YACvD,YAAY,IAAI,CAAC,CAAC;YAElB,wCAAwC;YACxC,cAAc,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;YACrC,KAAK,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;YACzC,KAAK,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;SACrC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;;YA9nBQ,2DAAc;YACd,2DAAO;YACP,mEAAS;YAHT,oEAAY;YAMZ,0DAAa;YAFb,8FAAiB;YACjB,wFAAiB;YACU,4DAAe;YAPZ,kDAAM;YAQpC,0EAAY;;;sBAuBlB,qDAAS,SAAC,uDAAU,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;AAD7B,UAAU;IALtB,yDAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,mEAAiC;;KAElC,CAAC;GACW,UAAU,CAkmBtB;AAlmBsB","sources":["./src/app/pages/survey/survey-routing.module.ts","./src/app/pages/survey/survey.module.ts","./src/app/pages/survey/survey.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SurveyPage } from './survey.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SurveyPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SurveyPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SurveyPageRoutingModule } from './survey-routing.module';\n\nimport { SurveyPage } from './survey.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SurveyPageRoutingModule\n  ],\n  declarations: [SurveyPage]\n})\nexport class SurveyPageModule {}\n","import { Component, OnInit, ViewChild, NgZone } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\nimport { Storage } from '@ionic/storage-angular';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { StudyTasksService } from 'src/app/services/study-task/study-tasks.service';\nimport { SurveyDataService } from '../../services/survey-data/survey-data.service';\nimport { NavController, IonContent, ToastController } from '@ionic/angular';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport * as moment from 'moment';\nimport {\n  DateTime, External,\n  Instruction, Media,\n  Module,\n  Multi,\n  Option,\n  Question,\n  Responses,\n  Slider,\n  Study,\n  Task,\n  Text,\n  YesNo\n} from 'types';\n\n@Component({\n  selector: 'app-survey',\n  templateUrl: './survey.page.html',\n  styleUrls: ['./survey.page.scss'],\n})\nexport class SurveyPage implements OnInit {\n  @ViewChild(IonContent, { static: false }) content: IonContent;\n\n  // the text to display as submit button label\n  submit_text = 'Submit';\n\n  // variables to handle the sections\n  current_section = 1;\n  num_sections: number;\n  current_section_name: string;\n\n  // study object\n  study: Study;\n  // survey template - load prior to data from storage ### This seems like the wrong survey format\n  survey: Module = {\n    type: '',\n    name: '',\n    submit_text: '',\n\n    condition: '',\n    alerts: {\n      title: '',\n      message: '',\n      start_offset: 0,\n      duration: 0,\n      times: [],\n      random: false,\n      random_interval: 0,\n      sticky: false,\n      sticky_label: '',\n      timeout: false,\n      timeout_after: 0,\n    },\n    graph: {\n      display: false,\n      variable: '',\n      title: '',\n      blurb: '',\n      type: 'bar',\n      max_points: 0,\n    },\n    sections: [\n      {\n        name: '',\n        shuffle: false,\n        questions: [],\n      }\n    ],\n    uuid: '',\n    unlock_after: [],\n    shuffle: false,\n  }\n\n  questions: any;\n\n  // task objects\n  tasks: Task[];\n  task_id: string;\n  task_index: number;\n  module_index: number;\n  module_name: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private storage: Storage,\n    private statusBar: StatusBar,\n    private domSanitizer: DomSanitizer,\n    private navController: NavController,\n    private studyTasksService: StudyTasksService,\n    private surveyDataService: SurveyDataService,\n    private toastController: ToastController,\n    private ngZone: NgZone,\n    private iab: InAppBrowser\n  ) { }\n\n  /**\n   * Triggered when the survey page is first opened\n   * Initialises the survey and displays it on the screen\n   */\n  ngOnInit() {\n    // set statusBar to visible on Android\n    this.statusBar.styleLightContent();\n    this.statusBar.backgroundColorByHexString('#0F2042');\n\n    // necessary to update height of external embedded content\n    window.addEventListener('message', (e) => {\n      if (e.data.hasOwnProperty('frameHeight')) {\n        (<HTMLElement>(\n          document.querySelector('iframe[src^=\"' + e.data.url + '\"]')\n        )).style.height = `${e.data.frameHeight + 10}px`;\n        (<HTMLElement>(\n          document.querySelector('iframe[src^=\"' + e.data.url + '\"]')\n        )).style.width = `99%`;\n      }\n    });\n\n    // the id of the task to be displayed\n    this.task_id = this.route.snapshot.paramMap.get('task_id') || '';\n\n    Promise.all([\n      this.storage.get('current-study'),\n      this.storage.get('uuid'),\n    ]).then((values) => {\n      const studyObject = values[0];\n      const uuid = values[1];\n\n      // get the task object for this task\n      this.studyTasksService.getAllTasks().then((tasks) => {\n        this.tasks = tasks;\n        for (let i = 0; i < this.tasks.length; i++) {\n          if (this.task_id === String(this.tasks[i].task_id)) {\n            this.module_name = this.tasks[i].name;\n            this.module_index = this.tasks[i].index;\n            this.task_index = i;\n            break;\n          }\n        }\n\n        // check if this task is valid\n        this.studyTasksService.getTaskDisplayList().then((t) => {\n          let taskAvailable = false;\n          for (const task of t) {\n            if (String(task.task_id) === this.task_id) {\n              taskAvailable = true;\n              break;\n            }\n          }\n          if (!taskAvailable) {\n            this.showToast(\n              'This task had a time limit and is no longer available.',\n              'bottom'\n            );\n            this.navController.navigateRoot('/');\n          }\n        });\n\n        // extract the JSON from the study object\n        this.study = JSON.parse(studyObject);\n\n        // get the correct module\n        this.survey = this.study.modules[this.module_index];\n\n        // shuffle modules if required\n        if (this.survey.shuffle) {\n          this.survey.sections = this.shuffle(this.survey.sections);\n        }\n\n        // shuffle questions if required\n        for (const section of this.survey.sections) {\n          if (section.shuffle) {\n            section.questions = this.shuffle(section.questions);\n          }\n        }\n\n        // get the name of the current section\n        this.num_sections = this.survey.sections.length;\n        this.current_section_name =\n          this.survey.sections[this.current_section - 1].name;\n\n        // get the user ID and then set up question variables\n        // initialise all of the questions to be displayed\n        this.setupQuestionVariables(uuid);\n\n        // set the submit text as appropriate\n        if (this.current_section < this.num_sections) {\n          this.submit_text = 'Next';\n        } else {\n          this.submit_text = this.survey.submit_text;\n        }\n\n        // set the current section of questions\n        this.questions =\n          this.survey.sections[this.current_section - 1].questions;\n\n        // toggle rand_group questions\n        // figure out which ones are grouped together, randomly show one and set its response value to 1\n        const randomGroups: { [rand_group: string]: string[] } = {};\n        for (const section of this.survey.sections) {\n          for (const question of section.questions) {\n            if (question.rand_group) {\n              // set a flag to indicate that this question shouldn't reappear via branching logic\n              question.noToggle = true;\n\n              // categorise questions by rand_group\n              if (!(question.rand_group in randomGroups)) {\n                randomGroups[question.rand_group] = [];\n                randomGroups[question.rand_group].push(question.id);\n              } else {\n                randomGroups[question.rand_group].push(question.id);\n              }\n            }\n          }\n        }\n\n        // from each rand_group, select a random item to show\n        const showThese = [];\n        for (const key in randomGroups) {\n          if (randomGroups.hasOwnProperty(key)) {\n            // select a random value from each array and add it to the \"showThese array\"\n            showThese.push(\n              randomGroups[key][\n                Math.floor(Math.random() * randomGroups[key].length)\n              ]\n            );\n          }\n        }\n\n        // iterate back through and show the ones that have been randomly calculated\n        // while removing the branching attributes from those that are hidden\n        for (const section of this.survey.sections) {\n          for (const question of section.questions) {\n            if (showThese.includes(question.id)) {\n              question.noToggle = false;\n              question.response = 1;\n              // hide any questions from the rand_group that were not made visible\n              // and remove any branching logic attributes\n              // ### How to do this in TS?\n            } else if (question.noToggle) {\n              question.hideSwitch = false;\n              // @ts-ignore\n              delete question.hide_id;\n              // @ts-ignore\n              delete question.hide_value;\n              // @ts-ignore\n              delete question.hide_if;\n            }\n          }\n        }\n\n        // toggle dynamic question setup\n        for (const section of this.survey.sections) {\n          for (const question of section.questions) {\n            this.toggleDynamicQuestions(question);\n          }\n        }\n\n        // log the user visiting this tab\n        this.surveyDataService.logPageVisitToServer({\n          timestamp: moment().format(),\n          milliseconds: moment().valueOf(),\n          page: 'survey',\n          event: 'entry',\n          module_index: this.module_index,\n        });\n      });\n    });\n  }\n\n  /**\n   * Handles the back button behaviour\n   */\n  back() {\n    if (this.current_section > 1) {\n      this.ngZone.run(() => {\n        this.current_section--;\n        this.current_section_name =\n          this.survey.sections[this.current_section - 1].name;\n        this.questions =\n          this.survey.sections[this.current_section - 1].questions;\n        this.submit_text = 'Next';\n      });\n    } else {\n      // save an exit log\n      this.surveyDataService.logPageVisitToServer({\n        timestamp: moment().format(),\n        milliseconds: moment().valueOf(),\n        page: 'survey',\n        event: 'exit',\n        module_index: this.module_index,\n      });\n      // nav back to the home screen\n      this.navController.navigateRoot('/');\n    }\n  }\n\n  /**\n   * Sets up any questions that need initialisation before display\n   * e.g. sets date/time objects to current date/time, set default values for sliders, etc.\n   */\n  setupQuestionVariables(uuid: string) {\n    // for all relevant questions add an empty response variable\n    for (const section of this.survey.sections) {\n      for (const question of section.questions) {\n        // for all question types that can be responded to, set default values\n        question.response = '';\n        question.model = '';\n        question.hideError = true;\n        question.hideSwitch = true;\n\n        // for datetime questions, default to the current date/time\n        if (question.type === 'datetime') {\n          // placeholder for dates\n          question.model = moment().format();\n\n          // for audio/video questions, sanitize the URLs to make them safe/work in html5 tags ### Not sanitizing at themoment\n        } else if (\n          question.type === 'media' &&\n          (question.subtype === 'audio' || question.subtype === 'video')\n        ) {\n          // @ts-ignore\n          question.src = this.domSanitizer.bypassSecurityTrustResourceUrl(\n            question.src\n          );\n          if (question.subtype === 'video') {\n            // @ts-ignore\n            question.thumb = this.domSanitizer.bypassSecurityTrustResourceUrl(\n              question.thumb\n            );\n          }\n\n          // for external embedded content, sanitize the URLs to make them safe/work in html5 tags ### Since when is there an exteral type?\n        } else if (question.type === 'external') {\n          question.src = question.src + '?uuid=' + uuid;\n          // @ts-ignore\n          question.src = this.domSanitizer.bypassSecurityTrustResourceUrl(\n            question.src\n          );\n\n          // for slider questions, set the default value to be halfway between min and max\n        } else if (question.type === 'slider') {\n          // get min and max\n          const min = question.min;\n          const max = question.max;\n\n          // set the default value of the slider to the middle value\n          const model = min + (max - min) / 2;\n          question.model = model;\n\n          // a starting value must also be set for the slider to work properly\n          question.value = model;\n\n          // for checkbox items, the response is set to an empty array\n        } else if (question.type === 'multi') {\n          // set up checked tracking for checkbox questions types\n          const tempOptions: Option[] = [];\n          for (const option of question.options) {\n            tempOptions.push({\n              text: option,\n              checked: false,\n            });\n          }\n          question.optionsChecked = tempOptions;\n\n          // counterbalance the choices if necessary\n          if (question.shuffle) {\n            question.optionsChecked = this.shuffle(question.optionsChecked);\n          }\n\n          // set the empty response to an array for checkbox questions\n          if (!question.radio) {\n            question.response = [];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Saves the response to a question and triggers and branching\n   *\n   * @param question The question that has been answered\n   */\n  setAnswer(question: Question) {\n    // save the response and hide error\n    question.response = question.model;\n    question.hideError = true;\n\n    // trigger any branching tied to this question\n    this.toggleDynamicQuestions(question);\n  }\n\n  /**\n   * Fires every time a checkbox question is answered; converts the response(s) to a String\n   *\n   * @param option The option selected in a checkbox group\n   * @param question The question that has been answered\n   */\n  changeCheckStatus(option: Option, question: Question) {\n    // get question responses and split\n    let responses: string[] = [];\n\n    // split all of the responses up into individual strings\n    if (question.response && question.response !== '') {\n      responses = question.response.toString().split(';');\n      responses.pop();\n    }\n\n    // if the checked item was unchecked then remove it\n    // otherwise add it to the response array\n    if (responses.indexOf(option.text) > -1) {\n      // remove it\n      const index = responses.indexOf(option.text);\n      if (index !== -1) {\n        responses.splice(index, 1);\n      }\n    } else {\n      responses.push(option.text);\n    }\n\n    // write the array back to a single string\n    let response_string = '';\n    for (const response of responses) {\n      response_string += response + ';';\n    }\n\n    // hide any non-response error\n    question.hideError = true;\n    question.response = response_string;\n  }\n\n  /**\n   * Opens an external file in the in app browser\n   *\n   * @param url The url of the PDF file to open\n   */\n  openExternalFile(url: string) {\n    this.iab.create(url, '_system');\n  }\n\n  toggleDynamicQuestions(question: Question) {\n    // if a question was hidden by rand_group\n    // don't do any branching\n    if (question.noToggle !== undefined && question.noToggle) {\n      return;\n    }\n\n    const id = question.id;\n    // hide anything with the id as long as the value is equal\n    for (const section of this.survey.sections) {\n      for (const q of section.questions) {\n        if ('hide_id' in q && q.hide_id === id) {\n          const hideValue = q.hide_value;\n\n          if (q.type === 'multi' || q.type === 'yesno') {\n            // determine whether to hide/show the element\n            const hideIf = q.hide_if;\n            const valueEquals = hideValue === q.response;\n            if (valueEquals === hideIf) {\n              q.hideSwitch = false;\n            } else {\n              q.hideSwitch = true;\n            }\n          } else if (\n            q.type === 'slider' &&\n            typeof hideValue === 'string' &&\n            q.response\n          ) {\n            const direction = hideValue.substring(0, 1);\n            const cutoff = parseInt(\n              hideValue.substring(1, hideValue.length),\n              10\n            );\n            const lessThan = direction === '<';\n            if (lessThan) {\n              if (q.response <= cutoff) {\n                q.hideSwitch = true;\n              } else {\n                q.hideSwitch = false;\n              }\n            } else {\n              if (q.response >= cutoff) {\n                q.hideSwitch = true;\n              } else {\n                q.hideSwitch = false;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Triggered whenever the submit button is called\n   * Checks if all required questions have been answered and then moves to the next section/saves the response\n   */\n  submit() {\n    let errorCount = 0;\n    for (const question of this.questions) {\n      if (\n        question.required === true &&\n        (question.response === '' || question.response === undefined) &&\n        question.hideSwitch === true\n      ) {\n        question.hideError = false;\n        errorCount++;\n      } else {\n        question.hideError = true;\n      }\n    }\n\n    if (errorCount === 0) {\n      // if user on last page and there are no errors, fine to submit\n      if (this.current_section === this.num_sections) {\n        // add the alert time to the response\n        this.tasks[this.task_index].alert_time = moment(\n          this.tasks[this.task_index].time\n        ).format();\n\n        // get a timestmap of submission time in both readable and ms format\n        const response_time = moment().format();\n        this.tasks[this.task_index].response_time = response_time;\n\n        const response_time_ms = moment().valueOf();\n        this.tasks[this.task_index].response_time_ms = response_time_ms;\n\n        // indicate that the current task is completed\n        this.tasks[this.task_index].completed = true;\n\n        // add all of the responses to an object in the task to be sent to server\n        const responses: Responses = {};\n        for (const section of this.survey.sections) {\n          for (const question of section.questions) {\n            responses[question.id] = question.response;\n          }\n        }\n        this.tasks[this.task_index].responses = responses;\n\n        // attempt to post surveyResponse to server\n        this.surveyDataService.sendSurveyDataToServer({\n          module_index: this.module_index,\n          module_name: this.module_name,\n          responses,\n          response_time,\n          response_time_in_ms: response_time_ms,\n          alert_time: this.tasks[this.task_index].alert_time || '',\n        });\n\n        // write tasks back to storage\n        this.storage.set('study-tasks', this.tasks).then(() => {\n          // save an exit log\n          this.surveyDataService.logPageVisitToServer({\n            timestamp: moment().format(),\n            milliseconds: moment().valueOf(),\n            page: 'survey',\n            event: 'submit',\n            module_index: this.module_index,\n          });\n          this.navController.navigateRoot('/');\n        });\n      } else {\n        this.ngZone.run(() => {\n          this.current_section++;\n          this.questions =\n            this.survey.sections[this.current_section - 1].questions;\n          this.current_section_name =\n            this.survey.sections[this.current_section - 1].name;\n\n          if (this.current_section === this.num_sections) {\n            this.submit_text = this.survey.submit_text;\n          }\n\n          this.content.scrollToTop(0);\n        });\n      }\n    } else {\n      this.content.scrollToTop(500);\n      this.showToast('You must answer all required (*) questions', 'bottom');\n    }\n  }\n\n  /**\n   * Creates a Toast object to display a message to the user\n   *\n   * @param message A message to display in the toast\n   * @param position The position on the screen to display the toast\n   */\n  async showToast(message: string, position?: 'top' | 'bottom' | 'middle') {\n    const toast = await this.toastController.create({\n      message,\n      position,\n      keyboardClose: true,\n      color: 'danger',\n      buttons: [\n        {\n          text: 'Dismiss',\n          role: 'cancel',\n          handler: () => {},\n        },\n      ],\n    });\n\n    toast.present();\n  }\n\n  /**\n   * Randomly shuffle an array\n   * https://stackoverflow.com/a/2450976/1293256\n   *\n   * @param array The array to shuffle\n   * @return      The first item in the shuffled array\n   */\n  shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}
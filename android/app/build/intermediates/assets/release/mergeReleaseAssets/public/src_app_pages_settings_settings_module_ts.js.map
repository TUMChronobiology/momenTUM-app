{"version":3,"file":"src_app_pages_settings_settings_module_ts.js","mappings":"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","sources":["./src/app/pages/settings/settings-routing.module.ts","./src/app/pages/settings/settings.module.ts","./src/app/pages/settings/settings.page.ts","./src/app/services/notification/notifications.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPage } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { SettingsPageRoutingModule } from './settings-routing.module';\nimport { SettingsPage } from './settings.page';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TranslateModule.forChild(),\n    SettingsPageRoutingModule\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Storage } from '@ionic/storage-angular';\nimport { NavController, AlertController } from '@ionic/angular';\nimport { NotificationsService } from '../../services/notification/notifications.service';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport * as moment from 'moment';\nimport { TranslateConfigService } from '../../translate-config.service';\nimport { SurveyDataService } from '../../services/survey-data/survey-data.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage {\n  // stores the user's UUID\n  uuid: string;\n\n  // flag to track whether the user is in a study\n  isEnrolled = false;\n\n  // flag to track whether notifications are enabled\n  notificationsEnabled = true;\n\n  // the current language of the device\n  selectedLanguage: string;\n\n  // store a reference to the study object\n  // empty template used prior to loading data\n  study: any = {\n    properties: {\n      study_name: '',\n      instructions: '',\n      support_email: '',\n      support_url: '',\n      ethics: '',\n      pls: '',\n    },\n  };\n\n  constructor(\n    private storage: Storage,\n    private navController: NavController,\n    private alertController: AlertController,\n    private iab: InAppBrowser,\n    private notificsationsService: NotificationsService,\n    private translateConfigService: TranslateConfigService,\n    private surveyDataService: SurveyDataService\n  ) {\n    // get the default language of the device\n    this.selectedLanguage =\n      this.translateConfigService.getDefaultLanguage() || 'en';\n  }\n\n  ionViewWillEnter() {\n    this.isEnrolled = false;\n\n    Promise.all([\n      this.storage.get('current-study'),\n      this.storage.get('uuid'),\n      this.storage.get('notifications-enabled'),\n    ]).then((values) => {\n      // check if user is currently enrolled in study\n      // to show/hide additional options\n      const studyObject = values[0];\n      if (studyObject !== null) {\n        console.log('I found a study!');\n        this.isEnrolled = true;\n        this.study = JSON.parse(studyObject);\n      } else {\n        this.isEnrolled = false;\n      }\n\n      // get the uuid from storage to display in the list\n      this.uuid = values[1];\n\n      // get the status of the notifications\n      const notificationsEnabled = values[2];\n      if (notificationsEnabled === null) {\n        this.notificationsEnabled = false;\n      } else {\n        this.notificationsEnabled = notificationsEnabled;\n      }\n\n      // log the user visiting this tab\n      this.surveyDataService.logPageVisitToServer({\n        timestamp: moment().format(),\n        milliseconds: moment().valueOf(),\n        page: 'settings',\n        event: 'entry',\n        module_index: -1,\n      });\n    });\n  }\n\n  ionViewWillLeave() {\n    if (this.isEnrolled) {\n      this.surveyDataService.logPageVisitToServer({\n        timestamp: moment().format(),\n        milliseconds: moment().valueOf(),\n        page: 'settings',\n        event: 'exit',\n        module_index: -1,\n      });\n    }\n  }\n\n  /**\n   * Display a dialog to withdraw from the study\n   */\n  async withdrawFromStudy() {\n    const alert = await this.alertController.create({\n      header: 'Are you sure?',\n      message: 'By withdrawing, you will lose all progress.',\n      cssClass: 'alertStyle',\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n        },\n        {\n          text: 'Withdraw',\n          handler: () => {\n            // log a withdraw event to the server\n            this.surveyDataService.logPageVisitToServer({\n              timestamp: moment().format(),\n              milliseconds: moment().valueOf(),\n              page: 'settings',\n              event: 'withdraw',\n              module_index: -1,\n            });\n            // upload any pending logs and data\n            this.surveyDataService\n              .uploadPendingData('pending-log')\n              .then(() =>\n                this.surveyDataService.uploadPendingData('pending-data')\n              )\n              .then(\n                () => this.storage.remove('current-study')\n                // then remove all the pending study tasks from storage\n              )\n              .then(\n                () => this.storage.remove('study-tasks')\n                // then cancel all remaining notifications and navigate to home\n              )\n              .then(() => {\n                // cancel all notifications\n                this.notificsationsService.cancelAllNotifications();\n                // navigate to the home tab\n                this.navController.navigateRoot('/');\n              });\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  /**\n   * Enables/disables the notifications\n   */\n  toggleNotifications() {\n    // update the notifications flag\n    this.storage.set('notifications-enabled', this.notificationsEnabled);\n    // set the next 30 notifications (cancels all notifications before setting them if enabled)\n    this.notificsationsService.setNext30Notifications();\n  }\n\n  /**\n   * Opens the support website for the current study in a web browser\n   *\n   * @param support_url The current study's support website URL\n   */\n  openSupportURL(support_url: string) {\n    //window.location.href = support_url;\n    const browser = this.iab.create(support_url, '_system');\n  }\n\n  /**\n   * Opens a new email addressed to the current study's support email address\n   *\n   * @param support_email The current study's support email address\n   * @param study_name The current study's name\n   */\n  openSupportEmail(support_email: string, study_name: string) {\n    window.location.href =\n      'mailto:' + support_email + '?subject=Support: ' + study_name;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage-angular';\nimport { LocalNotifications } from '@ionic-native/local-notifications/ngx';\nimport { Task } from 'types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsService {\n  constructor(\n    private localNotifications: LocalNotifications,\n    private storage: Storage\n  ) {}\n\n  /**\n   * Schedules a notification, taking parameters from a task\n   *\n   * @param task The task that the notification is for\n   */\n  scheduleDummyNotification() {\n    this.localNotifications.schedule({\n      title: 'Hello',\n      text: 'World',\n      foreground: true,\n      trigger: { at: new Date(new Date().getTime() + 10000) },\n      smallIcon: 'res://notification_icon',\n      icon: 'res//notification_icon',\n      data: { task_index: 0 },\n      launch: true,\n      wakeup: true,\n      priority: 2,\n    });\n  }\n\n  /**\n   * Schedules a notification, takoing parameters from a task\n   *\n   * @param task The task that the notification is for\n   */\n  scheduleNotification(task: Task) {\n    this.localNotifications.schedule({\n      id: task.task_id,\n      title: task.alert_title,\n      text: task.alert_message,\n      foreground: true,\n      trigger: { at: new Date(Date.parse(task.time)) },\n      smallIcon: 'res://notification_icon',\n      icon: 'res//notification_icon',\n      data: {\n        task_index: task.index,\n        task_id: task.task_id,\n        task_time: task.time,\n      },\n      launch: true,\n      wakeup: true,\n      priority: 2,\n    });\n  }\n\n  /**\n   * Cancels all notifications that have been set\n   */\n  cancelAllNotifications() {\n    this.localNotifications.cancelAll();\n  }\n\n  /**\n   * Sets the next 30 notifications based on the next 30 tasks\n   */\n  async setNext30Notifications() {\n    await this.localNotifications.cancelAll();\n\n    const notificationsEnabled = await this.storage.get(\n      'notifications-enabled'\n    );\n\n    if (notificationsEnabled) {\n      const tasks = await this.storage.get('study-tasks');\n      if (tasks !== null) {\n        let alertCount = 0;\n        for (const task of tasks) {\n          const alertTime = new Date(Date.parse(task.time));\n\n          if (alertTime > new Date()) {\n            if (this.checkTaskIsUnlocked(task, tasks)) {\n              this.scheduleNotification(task);\n              alertCount++;\n            }\n          }\n\n          // only set 30 alerts into the future\n          if (alertCount === 30) {\n            break;\n          }\n        }\n      }\n    }\n\n    /*this.localNotifications.cancelAll().then(() => {\n      this.storage.get('notifications-enabled').then(notificationsEnabled => {\n        if (notificationsEnabled) {\n          this.storage.get('study-tasks').then((tasks) => {\n            if (tasks !== null) {\n              var alertCount = 0;\n              for (var i = 0; i < tasks.length; i++) {\n                var task = tasks[i];\n                var alertTime = new Date(Date.parse(task.time));\n\n                if (alertTime > new Date()) {\n                  if (this.checkTaskIsUnlocked(task, tasks)) {\n                    this.scheduleNotification(task);\n                    alertCount++;\n                  }\n                }\n\n                // only set 30 alerts into the future\n                if (alertCount === 30) break;\n              }\n            }\n          });\n        }\n      });\n    });*/\n  }\n\n  /**\n   *\n   * @param task\n   * @param study_tasks\n   */\n  checkTaskIsUnlocked(task: Task, study_tasks: Task[]) {\n    // get a set of completed task uuids\n    const completedUUIDs = new Set();\n    for (const t of study_tasks) {\n      if (t.completed) {\n        completedUUIDs.add(t.uuid);\n      }\n    }\n\n    // get the list of prereqs from the task\n    const prereqs = task.unlock_after;\n    let unlock = true;\n    for (const prereq of prereqs) {\n      if (!completedUUIDs.has(prereq)) {\n        unlock = false;\n        break;\n      }\n    }\n\n    return unlock;\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}